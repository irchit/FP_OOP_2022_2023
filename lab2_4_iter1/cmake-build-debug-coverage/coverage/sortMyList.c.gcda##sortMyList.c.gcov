        -:    0:Source:D:/Facultate/An1/Sem2/oop/lab/lab2_4_iter1/sortMyList.c
        -:    0:Graph:D:\Facultate\An1\Sem2\oop\lab\lab2_4_iter1\cmake-build-debug-coverage\CMakeFiles\lab2_4_iter1.dir\sortMyList.c.gcno
        -:    0:Data:D:\Facultate\An1\Sem2\oop\lab\lab2_4_iter1\cmake-build-debug-coverage\CMakeFiles\lab2_4_iter1.dir\sortMyList.c.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by irchit on 3/28/2023.
        -:    3://
        -:    4:
        -:    5:#include "sortMyList.h"
        -:    6:
function sortMyList called 5 returned 100% blocks executed 100%
        5:    7:void sortMyList(MyList* myList, int reversed) {
        5:    8:    int lenghtOfMyList = getLenghtOfMyList(myList);
        5:    8-block  0
call    0 returned 5
       17:    9:    for (int i = 0; i < lenghtOfMyList - 1; i++) {
       12:    9-block  0
       17:    9-block  1
branch  0 taken 12
branch  1 taken 5 (fallthrough)
       33:   10:        for (int j = i + 1; j < lenghtOfMyList; j++) {
       12:   10-block  0
       21:   10-block  1
       33:   10-block  2
branch  0 taken 21
branch  1 taken 12 (fallthrough)
       21:   11:            int needsSwapping = 0;
       21:   12:            ElementType ElementI = getElementFromMyList(myList, i);
       21:   12-block  0
call    0 returned 21
       21:   13:            ElementType ElementJ = getElementFromMyList(myList, j);
call    0 returned 21
       21:   14:            if (strcmp(ElementI.name, ElementJ.name) == 0)
branch  0 taken 6 (fallthrough)
branch  1 taken 15
        6:   15:                if ((ElementI.stock > ElementJ.stock) == !reversed)
        6:   15-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 1
        5:   16:                    needsSwapping = 1;
        5:   16-block  0
       21:   17:            if ((strcmp(ElementI.name, ElementJ.name) > 0) == !reversed)
       21:   17-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 9
       12:   18:                needsSwapping = 1;
       12:   18-block  0
       21:   19:            if (needsSwapping) {
       21:   19-block  0
branch  0 taken 15 (fallthrough)
branch  1 taken 6
       15:   20:                ElementType aux = ElementI;
       15:   21:                ElementI = ElementJ;
       15:   22:                ElementJ = aux;
       15:   23:                updateInMyList(myList, &ElementI, i);
       15:   23-block  0
call    0 returned 15
       15:   24:                updateInMyList(myList, &ElementJ, j);
call    0 returned 15
        -:   25:            }
        -:   26:        }
        -:   27:    }
        5:   28:}
        -:   29:
function testSort called 1 returned 100% blocks executed 70%
        1:   30:void testSort()
        -:   31:{
        1:   32:    MyList myList = createMyList();
        1:   32-block  0
call    0 returned 1
        1:   33:    Medicine medicine1 = createMedicine(1, "Paracetamol", 10, 10);
call    0 returned 1
        1:   34:    Medicine medicine2 = createMedicine(2, "Aspirina", 20, 20);
call    0 returned 1
        1:   35:    Medicine medicine3 = createMedicine(3, "Ibuprofeno", 30, 30);
call    0 returned 1
        1:   36:    Medicine medicine4 = createMedicine(4, "Paracetamol", 40, 40);
call    0 returned 1
        1:   37:    addToMyList(&myList, &medicine1);
call    0 returned 1
        1:   38:    addToMyList(&myList, &medicine2);
call    0 returned 1
        1:   39:    addToMyList(&myList, &medicine3);
call    0 returned 1
        1:   40:    addToMyList(&myList, &medicine4);
call    0 returned 1
        1:   41:    MyList copyMyList = copyOfMyList(&myList);
call    0 returned 1
        1:   42:    sortMyList(&copyMyList, 1);
call    0 returned 1
       1*:   43:    assert(getElementFromMyList(&copyMyList, 0).uniqueCode == 4);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   43-block  0
call    3 never executed
        1:   43-block  1
       1*:   44:    assert(getElementFromMyList(&copyMyList, 1).uniqueCode == 1);
        1:   44-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   44-block  1
call    3 never executed
        1:   44-block  2
       1*:   45:    assert(getElementFromMyList(&copyMyList, 2).uniqueCode == 3);
        1:   45-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   45-block  1
call    3 never executed
        1:   45-block  2
       1*:   46:    assert(getElementFromMyList(&copyMyList, 3).uniqueCode == 2);
        1:   46-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   46-block  1
call    3 never executed
        1:   46-block  2
        1:   47:    sortMyList(&copyMyList, 0);
        1:   47-block  0
call    0 returned 1
       1*:   48:    assert(getElementFromMyList(&copyMyList, 0).uniqueCode == 2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   48-block  0
call    3 never executed
        1:   48-block  1
       1*:   49:    assert(getElementFromMyList(&copyMyList, 1).uniqueCode == 3);
        1:   49-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   49-block  1
call    3 never executed
        1:   49-block  2
       1*:   50:    assert(getElementFromMyList(&copyMyList, 2).uniqueCode == 1);
        1:   50-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   50-block  1
call    3 never executed
        1:   50-block  2
       1*:   51:    assert(getElementFromMyList(&copyMyList, 3).uniqueCode == 4);
        1:   51-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   51-block  1
call    3 never executed
        1:   51-block  2
        1:   52:}
