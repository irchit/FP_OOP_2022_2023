        -:    0:Source:D:/Facultate/An1/Sem2/oop/lab/lab2_4_iter1/medicine.c
        -:    0:Graph:D:\Facultate\An1\Sem2\oop\lab\lab2_4_iter1\cmake-build-debug-coverage\CMakeFiles\lab2_4_iter1.dir\medicine.c.gcno
        -:    0:Data:D:\Facultate\An1\Sem2\oop\lab\lab2_4_iter1\cmake-build-debug-coverage\CMakeFiles\lab2_4_iter1.dir\medicine.c.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by irchit on 3/28/2023.
        -:    3://
        -:    4:#include "medicine.h"
        -:    5:
function createMedicine called 63 returned 100% blocks executed 100%
       63:    6:Medicine createMedicine(int uniqueCode, char* name, float concentration, int stock)
        -:    7:{
        -:    8:    Medicine newMedicine;
       63:    9:    newMedicine.uniqueCode = uniqueCode;
       63:   10:    strcpy_s(newMedicine.name, sizeof(newMedicine.name), name);
       63:   10-block  0
call    0 returned 63
       63:   11:    newMedicine.concentration = concentration;
       63:   12:    newMedicine.stock = stock;
       63:   13:    return newMedicine;
        -:   14:}
        -:   15:
function copyMedicine called 33 returned 100% blocks executed 100%
       33:   16:Medicine copyMedicine(Medicine* medicine)
        -:   17:{
       33:   18:    Medicine newMedicine = createMedicine(medicine->uniqueCode, medicine->name, medicine->concentration, medicine->stock);
       33:   18-block  0
call    0 returned 33
       33:   19:    return newMedicine;
        -:   20:}
        -:   21:
function deleteMedicine called 3 returned 100% blocks executed 100%
        3:   22:void deleteMedicine(Medicine* medicine)
        -:   23:{
        3:   24:    medicine->uniqueCode = -1;
        3:   25:    strcpy_s(medicine->name, sizeof(medicine->name), "");
        3:   25-block  0
call    0 returned 3
        3:   26:    medicine->concentration = 0;
        3:   27:    medicine->stock = 0;
        3:   28:}
        -:   29:
function validateMedicine called 20 returned 100% blocks executed 100%
       20:   30:int validateMedicine(Medicine* medicine)
        -:   31:{
       20:   32:    int uniqueCode = medicine->uniqueCode;
        -:   33:    char name[30];
       20:   34:    strcpy_s(name, 30, medicine->name);
       20:   34-block  0
call    0 returned 20
       20:   35:    float concentration = medicine->concentration;
       20:   36:    int stock = medicine->stock;
       20:   37:    if (uniqueCode < 0)
branch  0 taken 3 (fallthrough)
branch  1 taken 17
        3:   38:        return 1;
        3:   38-block  0
       17:   39:    if (strlen(name) == 0)
       17:   39-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 15
        2:   40:        return 2;
        2:   40-block  0
       15:   41:    if (concentration <= 0)
       15:   41-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 12
        3:   42:        return 3;
        3:   42-block  0
       12:   43:    if (stock < 0)
       12:   43-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 9
        3:   44:        return 4;
        3:   44-block  0
        9:   45:    return 0;
        9:   45-block  0
        -:   46:}
        -:   47:
function testsMedicine called 1 returned 100% blocks executed 56%
        1:   48:void testsMedicine()
        -:   49:{
        -:   50:    //Create tests
        1:   51:    int uniqueCode1 = 1;
        1:   52:    char name1[30] = "Aspirin";
        1:   53:    float concentration1 = 150;
        1:   54:    int stock1 = 1000;
        1:   55:    Medicine medicine1 = createMedicine(uniqueCode1, name1, concentration1, stock1);
        1:   55-block  0
call    0 returned 1
       1*:   56:    assert(medicine1.uniqueCode == uniqueCode1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   56-block  0
call    2 never executed
        1:   56-block  1
       1*:   57:    assert(medicine1.concentration == concentration1);
        1:   57-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   57-block  1
call    2 never executed
        1:   57-block  2
       1*:   58:    assert(medicine1.stock == stock1);
        1:   58-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   58-block  1
call    2 never executed
        1:   58-block  2
       1*:   59:    assert(strcmp(medicine1.name, name1) == 0);
        1:   59-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   59-block  1
call    2 never executed
        1:   59-block  2
        -:   60:
        -:   61:    //Validate tests
       1*:   62:    assert(validateMedicine(&medicine1) == 0);
        1:   62-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   62-block  1
call    3 never executed
        1:   62-block  2
        1:   63:    int uniqueCode2 = -10;
        1:   64:    char name2[30] = "";
        1:   65:    float concentration2 = 0;
        1:   66:    int stock2 = -2000;
        1:   67:    Medicine medicine2 = createMedicine(uniqueCode2, name2, concentration2, stock2);
        1:   67-block  0
call    0 returned 1
       1*:   68:    assert(validateMedicine(&medicine2) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   68-block  0
call    3 never executed
        1:   68-block  1
        1:   69:    medicine2.uniqueCode = uniqueCode1;
       1*:   70:    assert(validateMedicine(&medicine2) == 2);
        1:   70-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   70-block  1
call    3 never executed
        1:   70-block  2
        1:   71:    strcpy_s(medicine2.name, 30, name1);
        1:   71-block  0
call    0 returned 1
       1*:   72:    assert(validateMedicine(&medicine2) == 3);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   72-block  0
call    3 never executed
        1:   72-block  1
        1:   73:    medicine2.concentration = concentration1;
       1*:   74:    assert(validateMedicine(&medicine2) == 4);
        1:   74-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   74-block  1
call    3 never executed
        1:   74-block  2
        -:   75:
        -:   76:    //Copy tests
        1:   77:    Medicine medicine3 = copyMedicine(&medicine1);
        1:   77-block  0
call    0 returned 1
       1*:   78:    assert(medicine1.uniqueCode == medicine3.uniqueCode);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   78-block  0
call    2 never executed
        1:   78-block  1
       1*:   79:    assert(medicine1.concentration == medicine3.concentration);
        1:   79-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   79-block  1
call    2 never executed
        1:   79-block  2
       1*:   80:    assert(medicine1.stock == medicine3.stock);
        1:   80-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   80-block  1
call    2 never executed
        1:   80-block  2
       1*:   81:    assert(strcmp(medicine1.name, medicine3.name) == 0);
        1:   81-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   81-block  1
call    2 never executed
        1:   81-block  2
        -:   82:
        -:   83:    //Delete tests
        1:   84:    deleteMedicine(&medicine1);
        1:   84-block  0
call    0 returned 1
        1:   85:    deleteMedicine(&medicine2);
call    0 returned 1
        1:   86:    deleteMedicine(&medicine3);
call    0 returned 1
       1*:   87:    assert(medicine1.uniqueCode == -1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   87-block  0
call    2 never executed
        1:   87-block  1
       1*:   88:    assert(medicine1.concentration == 0);
        1:   88-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   88-block  1
call    2 never executed
        1:   88-block  2
       1*:   89:    assert(medicine1.stock == 0);
        1:   89-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   89-block  1
call    2 never executed
        1:   89-block  2
       1*:   90:    assert(strcmp(medicine1.name, "") == 0);
        1:   90-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   90-block  1
call    2 never executed
        1:   90-block  2
       1*:   91:    assert(medicine2.uniqueCode == -1);
        1:   91-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   91-block  1
call    2 never executed
        1:   91-block  2
       1*:   92:    assert(medicine2.concentration == 0);
        1:   92-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   92-block  1
call    2 never executed
        1:   92-block  2
       1*:   93:    assert(medicine2.stock == 0);
        1:   93-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   93-block  1
call    2 never executed
        1:   93-block  2
       1*:   94:    assert(strcmp(medicine2.name, "") == 0);
        1:   94-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   94-block  1
call    2 never executed
        1:   94-block  2
       1*:   95:    assert(medicine3.uniqueCode == -1);
        1:   95-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   95-block  1
call    2 never executed
        1:   95-block  2
       1*:   96:    assert(medicine3.concentration == 0);
        1:   96-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   96-block  1
call    2 never executed
        1:   96-block  2
       1*:   97:    assert(medicine3.stock == 0);
        1:   97-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   97-block  1
call    2 never executed
        1:   97-block  2
       1*:   98:    assert(strcmp(medicine3.name, "") == 0);
        1:   98-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   98-block  1
call    2 never executed
        1:   98-block  2
        1:   99:}
